[
  {
    "id": "cartao-continente-memorygame-vulnerability",
    "title": "Abusing Cartão Continente's Memory Game - A Vulnerability that fell into forgetfulness",
    "date": "August 08, 2025",
    "excerpt": "In April 2025, I discovered a serious vulnerability in the Cartão Continente app's memory game feature. After responsibly disclosing it to MC Sonae, their response was... boring. Here's how I found it, what I did, and why it's now time to publicly share this.",
    "content": "<p>Back in April 2025, I was casually playing a game on the Cartão Continente app, the rewards app from Continente, one of Portugal's biggest retail brands under the Sonae group, when I noticed something unusual.</p><h3>What I Was Doing</h3><p>I was messing around with their memory game, part of a limited-time points campaign. At first, I was just trying to save some euros because... why not? But as someone who loves poking around HTTP traffic and APIs, I started looking deeper... and what I found was alarming.</p><p>My curiosity kicked in, and I started to inspect how the app handled point submissions. So I fired up a proxy (Burp Suite, for the curious) and started capturing the requests the app sent when finishing a game.</p><p>One endpoint in particular caught my attention:</p><pre><code>https://cartaocontinente.pt/CartaoContinente/screenservices/CartaoContinente_Gaming_CW/MemoryGame/MemoryGame_Main/ActionEnd_MG_Game</code></pre><p>There was no CAPTCHA. No session or game ID validation. No server-side verification of the game actually being played. Just a simple JSON request claiming I played and won the game, with full control over flips, duration, game log... everything.</p><p>So naturally, I tested what would happen if I just... replayed that same request. And sure enough, points started stacking.</p><h3>Proof of Concept: Spam Curl Requests</h3><p>With a simple tool like CURL, I could easily automate it. Here's a simplified version of what I ran, repeatedly:</p><pre><code>curl -X POST https://cartaocontinente.pt/... -H \\\"Cookie: [session]\\\" -H \\\"x-csrftoken: [...]\\\" -H \\\"Content-Type: application/json\\\" -d '{\\\"inputParameters\\\":{\\\"Flips\\\":10,\\\"Duration\\\":\\\"14.75\\\"}}'</code></pre><p>It worked like a charm. I racked up between 1500-2000 points in just 2-3 seconds, just by looping that one request. To confirm it wasn't just visual, I redeemed 50 of those points for a 20% discount voucher on \"Panrico bread,\" because... I am a good person (I could have traded it for a 1€ voucher :omegalul:). I just didn't want to abuse it, because I planned to report the vulnerability later to the MC Sonae team.</p><h3>The Impact</h3><ul><li>Unlimited reward points for minimal effort</li><li>Direct financial loss to MC Sonae (if abused at scale)</li><li>No rate-limiting or fraud detection mechanisms in place</li><li>Potential for bot exploitation, especially during similar future campaigns</li></ul><p>This wasn't just a UI bug or some visual validation issue, it had real economic impact potential for MC Sonae, and they didn't seem to take it seriously...</p><h3>Reporting It</h3><p>I responsibly reported the issue on <strong>April 19, 2025</strong> to their official disclosure email (<code>rvd@mc.pt</code>), as per their <a href=\"https://mc.sonae.pt/en/responsible-disclosure-of-vulnerabilities/\" target=\"_blank\">Responsible Disclosure policy</a>. I fully disclosed every detail, even more than what I wrote here, because, after all, I don't want people to take advantage of it. (And no, it won't work out of the box, it's a bit more tricky to make and read these kinds of requests on a phone.)</p><h3>The Answer</h3><p>Five days later (quite fast, actually), I got a polite but vague reply:</p><blockquote>We have confirmed the existence of the described vulnerability. The responsible department is currently monitoring it... We will provide feedback in due course.</blockquote><p>And that was it. Nothing else. It's been well over 90 days now (the window after which public disclosure is acceptable) and I haven't heard anything back.</p><p>No follow-up. No patch confirmation. No further acknowledgment (not even a simple \"thanks\").</p><h3>So… Now What?</h3><p>I waited patiently. Gave them every chance to respond, act, and fix it. I don't actually know if they fixed it (and I don't even care at this point), but as my first vulnerability disclosure, it was kind of disappointing... but yeah, I learned some things about the process.</p><p>This isn't about trying to embarrass anyone or score points. It's a reminder that even seemingly harmless features — like marketing minigames — can introduce real security risks. Vulnerabilities like these deserve to be taken seriously, regardless of where they're found. Security shouldn't stop at payment systems or login forms—any feature that can be abused to extract value should be properly validated on the server side.</p><p>I knew from the start that I probably wouldn't receive any kind of reward or recognition for this report — but that doesn't mean vulnerability disclosures should be ignored. A simple thank you or token of appreciation goes a long way in encouraging responsible research. Reports like these should be valued more, not just acknowledged and forgotten.</p><h3>Lessons Learned</h3><ul><li>Big companies make mistakes too</li><li>Always rate-limit requests and verify session integrity</li><li>Bug bounty programs or public recognition go a long way in building trust</li></ul><p>As for me, I'm just a Computer Engineering student who tried to do the right thing. And I hope by sharing this, more developers will take these seemingly small security gaps seriously.</p><hr/><p><strong>Author:</strong> Hugo Pereira<br/><strong>Email:</strong> me@operas.pt</p>"
  }
]
